#include <MKRNB.h>
#include <ArduinoMqttClient.h>
#include <ModbusMaster.h>

// GPRS/MQTT Settings
const char PINNUMBER[] = "";
const char APN[] = "stmiot";
const char broker[] = "test.mosquitto.org";
const char topic[] = "test/vel";
int port = 1883;

// ModbusMaster object
ModbusMaster node;

// GPRS/MQTT objects
NBClient client;
GPRS gprs;
NB nbAccess;
MqttClient mqttClient(client);

// RS485 pre/post-transmission hooks
void preTransmission() {
  digitalWrite(LED_BUILTIN, HIGH);
}

void postTransmission() {
  digitalWrite(LED_BUILTIN, LOW);
}

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);

  Serial.begin(9600);
  while (!Serial);

  Serial1.begin(4800); // RS485
  node.begin(1, Serial1); // Slave ID 1
  node.preTransmission(preTransmission);
  node.postTransmission(postTransmission);

  Serial.println("Connecting to NB IoT...");
  bool connected = false;
  while (!connected) {
    if ((nbAccess.begin(PINNUMBER) == NB_READY) &&
        (gprs.attachGPRS(APN) == GPRS_READY)) {
      connected = true;
    } else {
      Serial.println("Not connected. Retrying...");
      delay(1000);
    }
  }

  Serial.println("Connected. Connecting to MQTT broker...");
  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());
    while (1);
  }

  Serial.println("Connected to MQTT broker!");
  mqttClient.onMessage(onMqttMessage);
  mqttClient.subscribe(topic);
}

void loop() {
  mqttClient.poll(); // Check for incoming messages

  uint8_t result = node.readInputRegisters(0x0000, 7);
  if (result == node.ku8MBSuccess) {
    uint16_t moisture = node.getResponseBuffer(0);
    int16_t temperature = (int16_t)node.getResponseBuffer(1);
    uint16_t ec = node.getResponseBuffer(2);
    float ph = node.getResponseBuffer(3) / 10.0;
    uint16_t nitrogen = node.getResponseBuffer(4);
    uint16_t phosphorus = node.getResponseBuffer(5);
    uint16_t potassium = node.getResponseBuffer(6);

    // Format JSON payload
    String payload = "{";
    payload += "\"moisture\":" + String(moisture) + ",";
    payload += "\"temperature\":" + String(temperature) + ",";
    payload += "\"ec\":" + String(ec) + ",";
    payload += "\"ph\":" + String(ph) + ",";
    payload += "\"nitrogen\":" + String(nitrogen) + ",";
    payload += "\"phosphorus\":" + String(phosphorus) + ",";
    payload += "\"potassium\":" + String(potassium);
    payload += "}";

    Serial.println("Publishing MQTT message: ");
    Serial.println(payload);

    mqttClient.beginMessage(topic);
    mqttClient.print(payload);
    mqttClient.endMessage();
  } else {
    Serial.print("Modbus Read Error: ");
    Serial.println(result);
  }

  delay(10000); // Wait 10 seconds between readings
}

void onMqttMessage(int messageSize) {
  Serial.print("Received message on topic '");
  Serial.print(mqttClient.messageTopic());
  Serial.print("' (");
  Serial.print(messageSize);
  Serial.println(" bytes):");

  while (mqttClient.available()) {
    Serial.print((char)mqttClient.read());
  }
  Serial.println();
}
